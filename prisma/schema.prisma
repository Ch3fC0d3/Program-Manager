generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model CardLink {
  id         String             @id @default(cuid())
  cardId     String
  entityType CardLinkEntityType
  entityId   String
  meta       Json?
  createdAt  DateTime           @default(now())
  card       Task               @relation(fields: [cardId], references: [id], onDelete: Cascade)

  @@unique([cardId, entityType, entityId])
  @@index([cardId])
}

model User {
  id                         String                   @id @default(cuid())
  email                      String                   @unique
  name                       String
  password                   String?
  role                       Role                     @default(MEMBER)
  avatar                     String?
  theme                      String?                  @default("light")
  sidebarCollapsed           Boolean?                 @default(false)
  createdAt                  DateTime                 @default(now())
  updatedAt                  DateTime                 @updatedAt
  authId                     String?                  @unique
  activities                 Activity[]
  attachments                Attachment[]
  boards                     BoardMember[]
  budgetsCreated             Budget[]                 @relation("BudgetCreator")
  comments                   Comment[]
  commentMentions            CommentMention[]
  contactsOwned              Contact[]
  contactInteractionsCreated ContactInteraction[]
  dashboardFiles             DashboardFile[]
  employeePayroll            EmployeePayroll[]
  expensesCreated            Expense[]                @relation("ExpenseCreator")
  meetingsCreated            Meeting[]
  meetingTemplatesCreated    MeetingTemplate[]
  notifications              Notification[]
  notificationPreferences    NotificationPreference[]
  organizations              OrganizationMember[]
  payrollPeriodsFinalized    PayrollPeriod[]          @relation("PayrollFinalizer")
  payrollPeriodsPaid         PayrollPeriod[]          @relation("PayrollPayer")
  tasksAssigned              Task[]                   @relation("TaskAssignee")
  tasksCreated               Task[]                   @relation("TaskCreator")
  watchingTasks              TaskWatcher[]
  templates                  Template[]
  timeEntriesApproved        TimeEntry[]              @relation("TimeEntryApproval")
  timeEntries                TimeEntry[]
  timeEntryAuditsCreated     TimeEntryAudit[]         @relation("TimeEntryAuditActor")
  messages                   Message[]

  @@index([email])
}

model Organization {
  id          String               @id @default(cuid())
  name        String
  slug        String               @unique
  description String?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  boards      Board[]
  members     OrganizationMember[]

  @@index([name])
}

model OrganizationMember {
  id             String           @id @default(cuid())
  organizationId String
  userId         String
  role           OrganizationRole @default(MEMBER)
  createdAt      DateTime         @default(now())
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
  @@index([userId])
}

model Board {
  id                      String                   @id @default(cuid())
  name                    String
  description             String?
  color                   String?
  icon                    String?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  deletedAt               DateTime?
  organizationId          String?
  archivedAt              DateTime?
  organization            Organization?            @relation(fields: [organizationId], references: [id])
  members                 BoardMember[]
  budgets                 Budget[]
  budgetLineItems         BudgetLineItem[]
  contacts                Contact[]
  customFields            CustomField[]
  expenses                Expense[]
  labels                  Label[]
  meetings                Meeting[]
  notificationPreferences NotificationPreference[]
  tasks                   Task[]
  templates               Template[]
  webhooks                Webhook[]

  @@index([name])
  @@index([organizationId])
  @@index([archivedAt])
}

model BoardMember {
  id        String    @id @default(cuid())
  boardId   String
  userId    String
  role      BoardRole @default(MEMBER)
  createdAt DateTime  @default(now())
  board     Board     @relation(fields: [boardId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([boardId, userId])
  @@index([boardId])
  @@index([userId])
}

model Task {
  id                  String            @id @default(cuid())
  title               String
  description         String?
  status              TaskStatus        @default(BACKLOG)
  priority            Priority          @default(MEDIUM)
  dueDate             DateTime?
  startDate           DateTime?
  estimatedHours      Float?
  actualHours         Float?
  position            Int               @default(0)
  customFields        Json?
  boardId             String
  creatorId           String
  assigneeId          String?
  parentId            String?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  cardType            CardType          @default(TASK)
  childCount          Int               @default(0)
  deletedAt           DateTime?
  hasChildren         Boolean           @default(false)
  orderIndex          Float             @default(0)
  aiConfidence        Float?
  aiLabels            String[]          @default([])
  aiSuggestedLinks    Json?
  aiSuggestedParentId String?
  aiSummary           String?
  intakeStatus        IntakeStatus      @default(INBOX)
  meetingId           String?
  activities          Activity[]
  attachments         Attachment[]
  budgets             Budget[]          @relation("BudgetVendor")
  budgetLineItems     BudgetLineItem[]  @relation("BudgetLineVendor")
  cardLinks           CardLink[]
  checklists          Checklist[]
  comments            Comment[]
  expensesLinked      Expense[]         @relation("ExpenseTask")
  expenses            Expense[]         @relation("ExpenseVendor")
  recurrence          Recurrence?
  reminders           Reminder[]
  assignee            User?             @relation("TaskAssignee", fields: [assigneeId], references: [id])
  board               Board             @relation(fields: [boardId], references: [id], onDelete: Cascade)
  creator             User              @relation("TaskCreator", fields: [creatorId], references: [id])
  meeting             Meeting?          @relation("MeetingTasks", fields: [meetingId], references: [id])
  parent              Task?             @relation("TaskSubtasks", fields: [parentId], references: [id], onDelete: Cascade)
  subtasks            Task[]            @relation("TaskSubtasks")
  customFieldValues   TaskCustomField[]
  blockedBy           TaskDependency[]  @relation("BlockingTask")
  dependencies        TaskDependency[]  @relation("DependentTask")
  labels              TaskLabel[]
  watchers            TaskWatcher[]
  timeEntries         TimeEntry[]

  @@index([boardId])
  @@index([creatorId])
  @@index([assigneeId])
  @@index([status])
  @@index([dueDate])
  @@index([boardId, status, position])
  @@index([boardId, status, dueDate])
  @@index([parentId])
  @@index([intakeStatus])
  @@index([aiSuggestedParentId])
}

model Label {
  id        String      @id @default(cuid())
  name      String
  color     String
  boardId   String
  category  String?
  createdAt DateTime    @default(now())
  deletedAt DateTime?
  board     Board       @relation(fields: [boardId], references: [id], onDelete: Cascade)
  tasks     TaskLabel[]

  @@unique([boardId, name])
  @@index([boardId])
}

model TaskLabel {
  id        String    @id @default(cuid())
  taskId    String
  labelId   String
  createdAt DateTime  @default(now())
  deletedAt DateTime?
  label     Label     @relation(fields: [labelId], references: [id], onDelete: Cascade)
  task      Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([taskId, labelId])
  @@index([taskId])
  @@index([labelId])
}

model Attachment {
  id           String    @id @default(cuid())
  filename     String
  originalName String
  mimeType     String
  size         Int
  url          String
  thumbnailUrl String?
  taskId       String?
  uploadedBy   String
  createdAt    DateTime  @default(now())
  deletedAt    DateTime?
  expenseId    String?
  contactId    String?
  contact      Contact?  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  expense      Expense?  @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  task         Task?     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user         User      @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([expenseId])
  @@index([contactId])
}

model Comment {
  id        String           @id @default(cuid())
  content   String
  taskId    String
  userId    String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  deletedAt DateTime?
  task      Task             @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  mentions  CommentMention[]

  @@index([taskId])
  @@index([userId])
}

model Checklist {
  id        String          @id @default(cuid())
  title     String
  position  Int             @default(0)
  taskId    String
  createdAt DateTime        @default(now())
  deletedAt DateTime?
  task      Task            @relation(fields: [taskId], references: [id], onDelete: Cascade)
  items     ChecklistItem[]

  @@index([taskId])
}

model ChecklistItem {
  id          String    @id @default(cuid())
  text        String
  completed   Boolean   @default(false)
  position    Int       @default(0)
  checklistId String
  createdAt   DateTime  @default(now())
  deletedAt   DateTime?
  checklist   Checklist @relation(fields: [checklistId], references: [id], onDelete: Cascade)

  @@index([checklistId])
}

model TaskDependency {
  id              String         @id @default(cuid())
  dependentTaskId String
  blockingTaskId  String
  type            DependencyType @default(FINISH_TO_START)
  createdAt       DateTime       @default(now())
  blockingTask    Task           @relation("BlockingTask", fields: [blockingTaskId], references: [id], onDelete: Cascade)
  dependentTask   Task           @relation("DependentTask", fields: [dependentTaskId], references: [id], onDelete: Cascade)

  @@unique([dependentTaskId, blockingTaskId])
  @@index([dependentTaskId])
  @@index([blockingTaskId])
}

model Reminder {
  id        String   @id @default(cuid())
  taskId    String
  time      DateTime
  sent      Boolean  @default(false)
  createdAt DateTime @default(now())
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([time, sent])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  link      String?
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, read])
}

model Activity {
  id        String   @id @default(cuid())
  taskId    String?
  userId    String
  action    String
  details   Json?
  createdAt DateTime @default(now())
  task      Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([userId])
  @@index([action])
}

model Template {
  id          String   @id @default(cuid())
  name        String
  description String?
  boardId     String
  creatorId   String
  data        Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  board       Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  creator     User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  @@index([boardId])
}

model Automation {
  id        String   @id @default(cuid())
  name      String
  boardId   String?
  enabled   Boolean  @default(true)
  trigger   Json
  actions   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([boardId])
}

model Contact {
  id            String               @id @default(cuid())
  firstName     String
  lastName      String?
  email         String?
  phone         String?
  company       String?
  jobTitle      String?
  jobFunction   String?
  stage         ContactStage         @default(CONTACTED)
  boardId       String?
  ownerId       String?
  notes         String?
  tags          String[]
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  deletedAt     DateTime?
  isVendor      Boolean              @default(false)
  website       String?
  addressLine1  String?
  addressLine2  String?
  city          String?
  state         String?
  postalCode    String?
  country       String?
  attachments   Attachment[]
  board         Board?               @relation(fields: [boardId], references: [id])
  owner         User?                @relation(fields: [ownerId], references: [id])
  interactions  ContactInteraction[]
  vendorProfile Vendor?              @relation("ContactVendor")

  @@index([boardId])
  @@index([ownerId])
  @@index([stage])
  @@index([email])
}

model Vendor {
  id        String   @id @default(cuid())
  name      String
  email     String?
  phone     String?
  website   String?
  tags      String[]
  notes     String?
  contactId String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  contact   Contact? @relation("ContactVendor", fields: [contactId], references: [id])

  @@index([name])
  @@index([contactId])
}

model ContactInteraction {
  id          String                   @id @default(cuid())
  contactId   String
  occurredAt  DateTime                 @default(now())
  method      ContactInteractionMethod @default(NOTE)
  summary     String?
  notes       String?
  createdById String
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
  contact     Contact                  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  createdBy   User                     @relation(fields: [createdById], references: [id], onDelete: Cascade)

  @@index([contactId, occurredAt])
}

model TaskWatcher {
  id        String   @id @default(cuid())
  taskId    String
  userId    String
  createdAt DateTime @default(now())
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([taskId, userId])
  @@index([userId])
}

model TimeEntry {
  id              String           @id @default(cuid())
  taskId          String?
  userId          String
  note            String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  approvedAt      DateTime?
  approvedById    String?
  breakMinutes    Int              @default(0)
  clockIn         DateTime
  clockOut        DateTime?
  durationMinutes Int?
  location        Json?
  rejectedReason  String?
  source          TimeEntrySource  @default(MANUAL)
  status          TimeEntryStatus  @default(PENDING)
  payrollPeriodId String?
  approvedBy      User?            @relation("TimeEntryApproval", fields: [approvedById], references: [id])
  payrollPeriod   PayrollPeriod?   @relation(fields: [payrollPeriodId], references: [id])
  task            Task?            @relation(fields: [taskId], references: [id])
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  audits          TimeEntryAudit[]

  @@index([userId, clockIn])
  @@index([status])
  @@index([taskId])
  @@index([approvedById])
  @@index([payrollPeriodId])
}

model TimeEntryAudit {
  id          String    @id @default(cuid())
  timeEntryId String
  actorId     String
  action      String
  changes     Json?
  createdAt   DateTime  @default(now())
  actor       User      @relation("TimeEntryAuditActor", fields: [actorId], references: [id], onDelete: Cascade)
  timeEntry   TimeEntry @relation(fields: [timeEntryId], references: [id], onDelete: Cascade)

  @@index([timeEntryId])
  @@index([actorId])
}

model PayrollPeriod {
  id              String            @id @default(cuid())
  weekStart       DateTime
  weekEnd         DateTime
  status          PayrollStatus     @default(DRAFT)
  finalizedAt     DateTime?
  finalizedBy     String?
  paidAt          DateTime?
  paidBy          String?
  notes           String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  employeePayroll EmployeePayroll[]
  finalizer       User?             @relation("PayrollFinalizer", fields: [finalizedBy], references: [id])
  payer           User?             @relation("PayrollPayer", fields: [paidBy], references: [id])
  timeEntries     TimeEntry[]

  @@unique([weekStart, weekEnd])
  @@index([status])
  @@index([weekStart])
}

model EmployeePayroll {
  id              String        @id @default(cuid())
  payrollPeriodId String
  userId          String
  totalMinutes    Int
  totalHours      Decimal       @db.Decimal(10, 2)
  hourlyRate      Decimal?      @db.Decimal(10, 2)
  grossPay        Decimal?      @db.Decimal(10, 2)
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  payrollPeriod   PayrollPeriod @relation(fields: [payrollPeriodId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([payrollPeriodId, userId])
  @@index([payrollPeriodId])
  @@index([userId])
}

model Recurrence {
  id        String   @id @default(cuid())
  taskId    String   @unique
  rrule     String
  nextRun   DateTime
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model CustomField {
  id        String            @id @default(cuid())
  boardId   String
  name      String
  type      String
  options   Json?
  required  Boolean           @default(false)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  board     Board             @relation(fields: [boardId], references: [id], onDelete: Cascade)
  values    TaskCustomField[]

  @@unique([boardId, name])
  @@index([boardId])
}

model TaskCustomField {
  id            String      @id @default(cuid())
  taskId        String
  customFieldId String
  value         Json
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  customField   CustomField @relation(fields: [customFieldId], references: [id], onDelete: Cascade)
  task          Task        @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([taskId, customFieldId])
  @@index([customFieldId])
}

model NotificationPreference {
  id               String                @id @default(cuid())
  userId           String
  frequency        NotificationFrequency @default(IMMEDIATE)
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  boardId          String?
  emailEnabled     Boolean               @default(true)
  inAppEnabled     Boolean               @default(true)
  notificationType NotificationType
  quietHoursEnd    Int?
  quietHoursStart  Int?
  board            Board?                @relation(fields: [boardId], references: [id], onDelete: Cascade)
  user             User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, notificationType, boardId])
  @@index([userId])
  @@index([boardId])
}

model Webhook {
  id        String   @id @default(cuid())
  boardId   String
  url       String
  secret    String?
  active    Boolean  @default(true)
  events    String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)

  @@index([boardId])
}

model CommentMention {
  id        String   @id @default(cuid())
  commentId String
  userId    String
  createdAt DateTime @default(now())
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId])
  @@index([userId])
}

model Expense {
  id              String              @id @default(cuid())
  vendorId        String?
  taskId          String?
  boardId         String?
  amount          Float
  currency        String              @default("USD")
  category        String?
  description     String?
  date            DateTime            @default(now())
  receiptUrl      String?
  receiptData     Json?
  aiVendorName    String?
  aiConfidence    Float?
  aiExtractedData Json?
  createdById     String
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  estimatedAmount Float?
  attachments     Attachment[]
  board           Board?              @relation(fields: [boardId], references: [id])
  createdBy       User                @relation("ExpenseCreator", fields: [createdById], references: [id])
  task            Task?               @relation("ExpenseTask", fields: [taskId], references: [id])
  vendor          Task?               @relation("ExpenseVendor", fields: [vendorId], references: [id])
  allocations     ExpenseAllocation[]
  lineItems       ExpenseLineItem[]

  @@index([vendorId])
  @@index([taskId])
  @@index([boardId])
  @@index([date])
  @@index([createdById])
}

model Budget {
  id              String              @id @default(cuid())
  name            String
  amount          Float
  period          BudgetPeriod        @default(MONTHLY)
  category        String?
  boardId         String?
  vendorId        String?
  startDate       DateTime
  endDate         DateTime?
  createdById     String
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  aiConfidence    Float?
  aiExtractedData Json?
  aiSourceId      String?
  currency        String              @default("USD")
  board           Board?              @relation(fields: [boardId], references: [id])
  createdBy       User                @relation("BudgetCreator", fields: [createdById], references: [id])
  vendor          Task?               @relation("BudgetVendor", fields: [vendorId], references: [id])
  lineItems       BudgetLineItem[]
  allocations     ExpenseAllocation[]

  @@index([boardId])
  @@index([vendorId])
  @@index([startDate])
}

model BudgetLineItem {
  id              String              @id @default(cuid())
  budgetId        String
  name            String
  type            BudgetLineType      @default(CATEGORY)
  category        String?
  vendorId        String?
  boardId         String?
  periodStart     DateTime
  periodEnd       DateTime?
  plannedAmount   Float
  currency        String              @default("USD")
  notes           String?
  aiSourceId      String?
  aiConfidence    Float?
  aiExtractedData Json?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  board           Board?              @relation(fields: [boardId], references: [id])
  budget          Budget              @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  vendor          Task?               @relation("BudgetLineVendor", fields: [vendorId], references: [id])
  snapshots       BudgetSnapshot[]
  allocations     ExpenseAllocation[]

  @@index([budgetId])
  @@index([boardId, category])
  @@index([vendorId])
}

model ExpenseLineItem {
  id              String              @id @default(cuid())
  expenseId       String
  description     String
  quantity        Float?
  unitCost        Float?
  totalAmount     Float
  category        String?
  aiExtractedData Json?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  allocations     ExpenseAllocation[]
  expense         Expense             @relation(fields: [expenseId], references: [id], onDelete: Cascade)

  @@index([expenseId])
  @@index([category])
}

model ExpenseAllocation {
  id                String           @id @default(cuid())
  budgetId          String
  budgetLineItemId  String?
  expenseId         String
  expenseLineItemId String?
  amount            Float
  currency          String           @default("USD")
  notes             String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  budget            Budget           @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  budgetLineItem    BudgetLineItem?  @relation(fields: [budgetLineItemId], references: [id])
  expense           Expense          @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  expenseLineItem   ExpenseLineItem? @relation(fields: [expenseLineItemId], references: [id])

  @@index([budgetId])
  @@index([budgetLineItemId])
  @@index([expenseId])
}

model BudgetSnapshot {
  id               String         @id @default(cuid())
  budgetLineItemId String
  periodStart      DateTime
  periodEnd        DateTime
  plannedAmount    Float
  actualAmount     Float          @default(0)
  variance         Float          @default(0)
  currency         String         @default("USD")
  generatedAt      DateTime       @default(now())
  budgetLineItem   BudgetLineItem @relation(fields: [budgetLineItemId], references: [id], onDelete: Cascade)

  @@index([budgetLineItemId, periodStart])
}

model Meeting {
  id          String   @id @default(cuid())
  title       String
  description String?
  notes       String?
  meetingDate DateTime
  duration    Int?
  location    String?
  attendees   String[]
  tags        String[]
  templateId  String?
  creatorId   String
  boardId     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  board       Board?   @relation(fields: [boardId], references: [id])
  creator     User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  tasks       Task[]   @relation("MeetingTasks")

  @@index([creatorId])
  @@index([boardId])
  @@index([meetingDate])
}

model MeetingTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  agenda      String?
  duration    Int?
  tags        String[]
  creatorId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  creator     User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  @@index([creatorId])
}

model DashboardFile {
  id           String    @id @default(cuid())
  name         String
  description  String?
  filename     String
  originalName String
  mimeType     String
  size         Int
  url          String
  category     String?
  uploadedBy   String
  isImportant  Boolean   @default(false)
  isPinned     Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  user         User      @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)

  @@index([uploadedBy])
  @@index([category])
  @@index([isPinned])
}

enum CardLinkEntityType {
  VENDOR
  CONTACT
  FILE
  LINK
  OTHER
}

enum Role {
  ADMIN
  MANAGER
  MEMBER
  VIEWER
}

enum OrganizationRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum BoardRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum CardType {
  TASK
  NOTE
  MILESTONE
  DOCUMENT
}

enum IntakeStatus {
  INBOX
  SUGGESTED
  PLACED
  REJECTED
}

enum TaskStatus {
  BACKLOG
  NEXT_7_DAYS
  IN_PROGRESS
  BLOCKED
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum DependencyType {
  FINISH_TO_START
  START_TO_START
  FINISH_TO_FINISH
  START_TO_FINISH
}

enum ContactStage {
  LEAD
  CONTACTED
  PENDING
  QUALIFIED
  NEGOTIATING
  ACTIVE
  ON_HOLD
  WON
  LOST
  ARCHIVED
}

enum ContactInteractionMethod {
  CALL
  EMAIL
  MEETING
  NOTE
  OTHER
}

enum TimeEntryStatus {
  PENDING
  APPROVED
  REJECTED
}

enum TimeEntrySource {
  MANUAL
  CLOCK
  IMPORT
}

enum PayrollStatus {
  DRAFT
  FINALIZED
  PAID
}

enum NotificationChannel {
  EMAIL
  IN_APP
  SMS
}

enum NotificationFrequency {
  IMMEDIATE
  DAILY
  WEEKLY
}

enum NotificationType {
  TASK_ASSIGNED
  TASK_COMPLETED
  TASK_DUE_SOON
  TASK_OVERDUE
  COMMENT_ADDED
  COMMENT_MENTION
  SUBTASK_COMPLETED
  STATUS_CHANGED
  PRIORITY_CHANGED
  BOARD_INVITE
  WEEKLY_DIGEST
}

enum BudgetPeriod {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
  CUSTOM
}

enum BudgetLineType {
  CATEGORY
  VENDOR
  PROJECT
  CUSTOM
}

model Message {
  id        String   @id @default(cuid())
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([createdAt])
}
